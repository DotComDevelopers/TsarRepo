@model TSAR.Models.Product

@{
    ViewBag.Title = "Create Product";
    Layout = "~/Views/Shared/_LayoutOther.cshtml";
}

<h2>Products</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        @if (User.IsInRole("Client"))
        {
            <h4>Get Quotation</h4>
        }
        <h4>Create Product</h4>
        <hr/>
        @Html.ValidationSummary(true, "", new {@class = "text-danger"})
        <div class="form-group">
            @Html.LabelFor(model => model.ProductName, htmlAttributes: new {@class = "control-label col-md-2"})
            <div class="col-md-10">
                @Html.EditorFor(model => model.ProductName, new {htmlAttributes = new {@class = "form-control"}})
                @Html.ValidationMessageFor(model => model.ProductName, "", new {@class = "text-danger"})
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Price, htmlAttributes: new {@class = "control-label col-md-2"})
            <div class="col-md-10">
                @Html.EditorFor(model => model.Price, new {htmlAttributes = new {@class = "form-control"}})
                @Html.ValidationMessageFor(model => model.Price, "", new {@class = "text-danger"})
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Description, htmlAttributes: new {@class = "control-label col-md-2"})
            <div class="col-md-10">
                @Html.EditorFor(model => model.Description, new {htmlAttributes = new {@class = "form-control"}})
                @Html.ValidationMessageFor(model => model.Description, "", new {@class = "text-danger"})
            </div>
        </div>

        @if (User.IsInRole("Client"))
        {
            <div class="form-group">
                <div align="center">
                    @Html.LabelFor(model => model.Selected, htmlAttributes: new {@class = "control-label"})
                </div>
                <div class="checkbox">
                    @Html.EditorFor(model => model.Selected)
                    @Html.ValidationMessageFor(model => model.Selected, "", new {@class = "text-danger"})
                </div>

            </div>
        }


        @*<div class="form-group">
            @Html.LabelFor(model => model.ClientName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ClientName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ClientName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
            </div>
        </div>*@@if (User.IsInRole("Client"))
                {
                    <div class="form-group">
                        <div class="col-md-offset-2 col-md-10">
                            <input type="button" value="Get Quotation" onclick="location.href = '@Url.Action("GetQuotation", "Products")'"/>
                        </div>
                    </div>
                }

                else
                {
                    <div class="form-group">
                        <div class="col-md-offset-2 col-md-10">
                            <input type="button" value="Create Product" onclick="location.href = '@Url.Action("CreateProduct", "Products")'"/>
                        </div>
                    </div>
                }

    </div>
}

@if (User.IsInRole("Client"))
{
    <div>
        @Html.ActionLink("Back to List", "MyQuotation")
    </div>
}
else
{
    <div>
        @Html.ActionLink("Back to List", "Index")
    </div>
}




@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
